<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// PULL RESOURCES

// THE CODE IN THIS CREATE EVENT IS FOR DEMO SETUP ONLY.
// THE DEMO TUTORIAL NOTES CAN BE FOUND UNDER "BTN RELEASED" IN THE STEP EVENT OF THIS OBJECT


// NOW IF YOU'LL EXCUSE ME, I NEED TO GET BACK TO SETTING UP THIS DEMO...
var state = true;
if ( file_exists( "VideoPlay/Demos/Demo_all/bg_demos.png" ) )
    {
    global.bg_demo_all = background_add( "VideoPlay/Demos/Demo_all/bg_demos.png", false, false );
    }
else
    {
    show_message( "bg" );
    state = false;
    }
    
if ( file_exists( "VideoPlay/Demos/Demo_all/fnt_btns.otf" ) )
    {
    global.fnt_demo_large = font_add( "VideoPlay/Demos/Demo_all/fnt_btns.otf", 20, 0, 0, 32, 127 );
    global.fnt_demo_small = font_add( "VideoPlay/Demos/Demo_all/fnt_btns.otf", 12, 0, 0, 32, 127 );
    global.fnt_demo_medium = font_add( "VideoPlay/Demos/Demo_all/fnt_btns.otf", 15, 0, 0, 32, 127 );
    }
else
    {
    show_message( "font" );
    state = false;
    }
    
if ( file_exists( "VideoPlay/Demos/Intermediate/Demo_4/spr_demo4_btn.png" ) )
    {
    global.spr_demo_4_btn = sprite_add( "VideoPlay/Demos/Intermediate/Demo_4/spr_demo4_btn.png", 1, 0, 0, 275, 42 );
    }
else
    {
    show_message( "btn" );
    state = false;
    }
    
if ( file_exists( "VideoPlay/Demos/Intermediate/Demo_4/spr_demo4_btn_pressed.png" ) )
    {
    global.spr_demo_4_btn_pressed = sprite_add( "VideoPlay/Demos/Intermediate/Demo_4/spr_demo4_btn_pressed.png", 1, 0, 0, 275, 42 );
    }
else
    {
    show_message( "btn pressed" );
    state = false;
    }


if ( state )
    {
    background_index[ 0 ] = global.bg_demo_all;
    background_visible[ 0 ] = true;
    sprite_collision_mask( global.spr_demo_4_btn, true, 1, 0, 0, 0, 0, 0, 0);
    sprite_collision_mask( global.spr_demo_4_btn_pressed, true, 1, 0, 0, 0, 0, 0, 0);
    }
else
    {
    show_debug_message( "Error Loading Demo Files: Demo_4" );
    show_message( "Error: Some Demo files are missing for -Demo_4-#Try re-importing the Demo files and try again" );
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// SETUP

// NO SERIOUSELY! THIS IS ALL JUST SETUP CODE. NOTHING EXCITING GOING ON HERE..
// SO... GO ON! MOVE ALONG!

sprite_index = global.spr_demo_4_btn;
text_col = c_white;
sprite_set_offset( sprite_index, sprite_width /2, sprite_height /2 );
x = 300;
y = room_height /2;
clickable = true;
video_list = ds_list_create();

// LOADING OTHER BTNS
instance_create( 0, 0, VideoPlay_obj_demo_4_btn2 );
instance_create( 0, 0, VideoPlay_obj_demo_4_btn3 );


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEMO_4 VideoPlay Android


// THE DEMO TUTORIAL NOTES CAN BE FOUND UNDER "BTN RELEASED" IN THE STEP EVENT
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BTN PRESSED

if ( device_mouse_check_button( 0, mb_left ) ) &amp;&amp; ( position_meeting( device_mouse_x( 0 ), device_mouse_y( 0 ), id ) )
    {
    sprite_index = global.spr_demo_4_btn_pressed;
    text_col = c_gray;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BTN RELEASED

if ( device_mouse_check_button_released( 0, mb_left ) ) &amp;&amp; ( clickable )
    {
    if ( position_meeting( device_mouse_x( 0 ), device_mouse_y( 0 ),  id ) )
        {
        // RESET BTN IMAGE INDEX
        sprite_index = global.spr_demo_4_btn;
        text_col = c_white;
        
        
        /*
        ----------------------------------------------------------------------------------------------------
        |  //////////////////////////////////////////////////////////////////////////////////////////////  |
        |                                                                                                  |
        |                                      -VIDEOPLAY DEMO_1-                                          |
        |                             -THE INTERMEDIATES OF QUEUING VIDEO-                                 |
        |                                                                                                  |
        |  //////////////////////////////////////////////////////////////////////////////////////////////  |
        ----------------------------------------------------------------------------------------------------
        
        IN THIS VIDEO WE WILL LOOK AT CREATING A QUE OF VIDEO FILES FROM A LOCAL SOURSE.
        YOU CAN USE VIDEOPLAYS QUEUING FREATURES TO PLAY MULTIPLE VIDEOS BACK-TO-BACK OR CREATE AN ENTIRE PLAY LIST OF VIDEOS.
        
        LIKE MOST OF VIDEOPLAY'S FEATURES, PLAY QUEUING IS VERY EASY TO IMPLEMENT INTO YOUR PROJECT. WE CAN ACHIEVE THIS
        WITH THE FOLLOWING FUNCTIONS:
        
        1. videoplay_android_que_add( "filename" );
            - ADD A VIDEO FILE TO THE QUE LIST FOR PLAYBACK -
        
        2. videoplay_andoid_que_play();
            - EXECUTE THE QUE LIST PLAYBACK -
        
        
         
            
        FOR THIS DEMO HOWEVER, WE WILL BE USING THE FUNCTION     videoplay_android_que_choose();     WHICH WILL ALLOW THE APP/GAME USER TO
        CHOOSE THEIR OWN VIDEO FILE TO ADD TO THE QUE LIST.
        
        
            
        SO LETS PUT THIS INTO PRACTICE.
        */
        
        
        // HERE WE WILL ALOW THE APP/GAME USER TO SELECT A VIDEO FILE STORED ON THEIR DEVICE AND ADD IT TO THE QUE LIST.
        // THIS FUNCTION WILL OPEN THE ANDROID NATIVE FILE BROWSER AND DISPLAY ALL COMPATIBLE VIDEO FILES ONLY.
        
        
        videoplay_android_que_choose();
        
    
        
        // WITH EACH SELECTED VIDEO THE QUE LIST IS UPDATED AUTOMATICALLY. YOU MAY THINK OF THIS QUE LIST AS A DS_LIST.
        // SEE THIS DEMOS (DEMO4) BTN2 OBJECT FOR THE QUE LIST EXECUTE FUNCTION
        
        /* 
        
        
        ----------------------------------------------------------------------------------------------------
        |  //////////////////////////////////////////////////////////////////////////////////////////////  |
        |                                                                                                  |
        |                                      -VIDEOPLAY DEMO_1-                                          |
        |                             -THE INTERMEDIATES OF QUEUING VIDEO-                                 |
        |                                                                                                  |
        |  //////////////////////////////////////////////////////////////////////////////////////////////  |
        ----------------------------------------------------------------------------------------------------
        */
        }
    else
        {
        // RESET BTN IMAGE INDEX
        sprite_index = global.spr_demo_4_btn;
        text_col = c_white;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEVICE BACK HWB

if ( keyboard_check_released( vk_backspace ) )
    {
    game_end();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// BTN DRAW
draw_self();

draw_set_font( global.fnt_demo_large );
draw_set_halign( fa_center );
draw_set_valign( fa_middle );
draw_set_colour( text_col );
draw_text( x, y, "CHOOSE VIDEO FILE" );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INFO DRAW

draw_set_font( global.fnt_demo_small );
draw_set_halign( fa_left );
draw_set_valign( fa_top );
draw_set_colour( c_white );
draw_text_ext(  30, 
                120, 
                "-- THE INTERMEDIATES OF QUEUING VIDEO --##IN THIS VIDEO WE WILL LOOK AT CREATING A QUE OF VIDEO FILES FROM A LOCAL SOURCE. YOU CAN USE VIDEOPLAYS QUEUING FREATURES TO PLAY MULTIPLE VIDEOS BACK-TO-BACK OR CREATE AN ENTIRE PLAY LIST OF VIDEOS.### See BTN RELEASE in the STEP EVENT of Demo_4 for starting code details.", 
                16, 
                500 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
